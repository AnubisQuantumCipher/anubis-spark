Phase 1 of 3: generation of data representation information ...
Phase 2 of 3: generation of Global contracts ...
Phase 3 of 3: flow analysis and proof ...
anubis_types.adb:51:33: info: loop invariant initialization proved (CVC5: 1 VC in max 0.0 seconds and 1 step)
anubis_types.adb:51:33: info: loop invariant preservation proved (CVC5: 1 VC in max 0.0 seconds and 1 step)
anubis_types.adb:51:83: info: index check proved (CVC5: 4 VC in max 0.0 seconds and 1 step)
anubis_types.adb:52:31: info: loop variant proved (CVC5: 1 VC in max 0.0 seconds and 1 step)
anubis_types.adb:61:33: info: loop invariant initialization proved (CVC5: 1 VC in max 0.0 seconds and 1 step)
anubis_types.adb:61:33: info: loop invariant preservation proved (CVC5: 1 VC in max 0.0 seconds and 1 step)
anubis_types.adb:61:83: info: index check proved (CVC5: 4 VC in max 0.0 seconds and 1 step)
anubis_types.adb:62:31: info: loop variant proved (CVC5: 1 VC in max 0.0 seconds and 1 step)
anubis_types.adb:71:33: info: loop invariant initialization proved (CVC5: 1 VC in max 0.0 seconds and 1 step)
anubis_types.adb:71:33: info: loop invariant preservation proved (CVC5: 1 VC in max 0.0 seconds and 1 step)
anubis_types.adb:71:83: info: index check proved (CVC5: 4 VC in max 0.0 seconds and 1 step)
anubis_types.adb:72:31: info: loop variant proved (CVC5: 1 VC in max 0.0 seconds and 1 step)
anubis_types.adb:81:33: info: loop invariant preservation proved (CVC5: 1 VC in max 0.0 seconds and 1 step)
anubis_types.adb:81:33: info: loop invariant initialization proved (CVC5: 1 VC in max 0.0 seconds and 1 step)
anubis_types.adb:81:83: info: index check proved (CVC5: 4 VC in max 0.0 seconds and 1 step)
anubis_types.adb:82:31: info: loop variant proved (CVC5: 1 VC in max 0.0 seconds and 1 step)
anubis_types.adb:91:33: info: loop invariant initialization proved (CVC5: 1 VC in max 0.0 seconds and 1 step)
anubis_types.adb:91:33: info: loop invariant preservation proved (CVC5: 1 VC in max 0.0 seconds and 1 step)
anubis_types.adb:91:83: info: index check proved (CVC5: 4 VC in max 0.0 seconds and 1 step)
anubis_types.adb:92:31: info: loop variant proved (CVC5: 1 VC in max 0.0 seconds and 1 step)
anubis_types.adb:101:33: info: loop invariant initialization proved (CVC5: 1 VC in max 0.0 seconds and 1 step)
anubis_types.adb:101:33: info: loop invariant preservation proved (CVC5: 1 VC in max 0.0 seconds and 1 step)
anubis_types.adb:101:62: info: overflow check proved (CVC5: 4 VC in max 0.0 seconds and 1 step)
anubis_types.adb:101:75: info: index check proved (CVC5: 4 VC in max 0.0 seconds and 1 step)
anubis_types.adb:102:31: info: loop variant proved (CVC5: 1 VC in max 0.0 seconds and 1 step)
anubis_types.ads:82:13: info: implicit aspect Always_Terminates on "Is_All_Zero" has been proved, subprogram will terminate
anubis_types.ads:83:41: info: index check proved (CVC5: 2 VC in max 0.0 seconds and 1 step)
anubis_types.ads:87:13: info: implicit aspect Always_Terminates on "Arrays_Equal" has been proved, subprogram will terminate
anubis_types.ads:89:36: info: index check proved (CVC5: 2 VC in max 0.0 seconds and 1 step)
anubis_types.ads:89:46: info: overflow check proved (CVC5: 2 VC in max 0.0 seconds and 1 step)
anubis_types.ads:89:56: info: overflow check proved (CVC5: 2 VC in max 0.0 seconds and 1 step)
anubis_types.ads:89:56: info: index check proved (CVC5: 2 VC in max 0.0 seconds and 1 step)
anubis_types.ads:96:13: info: implicit aspect Always_Terminates on "Is_Valid" has been proved, subprogram will terminate
anubis_types.ads:97:13: info: implicit aspect Always_Terminates on "Is_Valid" has been proved, subprogram will terminate
anubis_types.ads:98:13: info: implicit aspect Always_Terminates on "Is_Valid" has been proved, subprogram will terminate
anubis_types.ads:99:13: info: implicit aspect Always_Terminates on "Is_Valid" has been proved, subprogram will terminate
anubis_types.ads:100:13: info: implicit aspect Always_Terminates on "Is_Valid" has been proved, subprogram will terminate
anubis_types.ads:101:13: info: implicit aspect Always_Terminates on "Is_Valid" has been proved, subprogram will terminate
anubis_types.ads:102:13: info: implicit aspect Always_Terminates on "Is_Valid" has been proved, subprogram will terminate
anubis_types.ads:103:13: info: implicit aspect Always_Terminates on "Is_Valid" has been proved, subprogram will terminate
anubis_types.ads:104:13: info: implicit aspect Always_Terminates on "Is_Valid" has been proved, subprogram will terminate
anubis_types.ads:107:13: info: implicit aspect Always_Terminates on "Is_Zeroed" has been proved, subprogram will terminate
anubis_types.ads:108:13: info: implicit aspect Always_Terminates on "Is_Zeroed" has been proved, subprogram will terminate
anubis_types.ads:109:13: info: implicit aspect Always_Terminates on "Is_Zeroed" has been proved, subprogram will terminate
anubis_types.ads:110:13: info: implicit aspect Always_Terminates on "Is_Zeroed" has been proved, subprogram will terminate
anubis_types.ads:111:13: info: implicit aspect Always_Terminates on "Is_Zeroed" has been proved, subprogram will terminate
anubis_types.ads:119:15: info: postcondition proved (CVC5: 2 VC in max 0.0 seconds and 1 step)
anubis_types.ads:122:15: info: postcondition proved (CVC5: 2 VC in max 0.0 seconds and 1 step)
anubis_types.ads:125:15: info: postcondition proved (CVC5: 2 VC in max 0.0 seconds and 1 step)
anubis_types.ads:128:15: info: postcondition proved (CVC5: 2 VC in max 0.0 seconds and 1 step)
anubis_types.ads:131:15: info: postcondition proved (CVC5: 2 VC in max 0.0 seconds and 1 step)
anubis_types.ads:136:15: info: postcondition proved (CVC5: 1 VC in max 0.0 seconds and 1 step)
anubis_types-classical.ads:15:13: info: implicit aspect Always_Terminates on "HKDF_Output_Valid" has been proved, subprogram will terminate
anubis_types-classical.ads:20:13: info: implicit aspect Always_Terminates on "Decryption_Failed_Zeroed" has been proved, subprogram will terminate
anubis_types-pqc.ads:152:13: info: implicit aspect Always_Terminates on "Hybrid_Signature_Zeroed" has been proved, subprogram will terminate
anubis_types-pqc.ads:156:13: info: implicit aspect Always_Terminates on "Both_Signatures_Present" has been proved, subprogram will terminate
anubis_key_manager.adb:24:33: info: loop invariant preservation proved (Trivial: 1 VC in max 0.0 seconds and 2 steps)
anubis_key_manager.adb:24:33: info: loop invariant initialization proved (Trivial: 1 VC in max 0.0 seconds and 2 steps)
anubis_key_manager.adb:25:31: info: loop variant proved (CVC5: 1 VC in max 0.0 seconds and 1 step)
anubis_key_manager.adb:26:34: info: overflow check proved (CVC5: 2 VC in max 0.0 seconds and 1 step)
anubis_key_manager.adb:26:51: info: overflow check proved (CVC5: 2 VC in max 0.0 seconds and 1 step)
anubis_key_manager.adb:26:51: info: index check proved (CVC5: 2 VC in max 0.0 seconds and 1 step)
anubis_key_manager.adb:29:33: info: range check proved (CVC5: 2 VC in max 0.0 seconds and 1 step)
anubis_key_manager.adb:63:45: info: overflow check proved (CVC5: 2 VC in max 0.0 seconds and 1 step)
anubis_key_manager.adb:76:33: info: loop invariant initialization proved (CVC5: 1 VC in max 0.0 seconds and 1 step)
anubis_key_manager.adb:76:33: info: loop invariant preservation proved (CVC5: 1 VC in max 0.0 seconds and 1 step)
anubis_key_manager.adb:77:54: info: index check proved (CVC5: 4 VC in max 0.0 seconds and 1 step)
anubis_key_manager.adb:78:31: info: loop variant proved (CVC5: 1 VC in max 0.0 seconds and 1 step)

anubis_key_manager.ads:36:07: low: "Managed.Valid" might not be set in "Create_Managed_Key"
   36 |      Managed    : out    Managed_Key;
      |      ^~~~~~~
  reason for check: OUT parameter should be fully initialized on return
  possible fix: initialize "Managed.Valid" on all paths, make "Managed" an IN OUT parameter or annotate it with aspect Relaxed_Initialization

anubis_key_manager.ads:36:07: low: "Managed.Policy.Usage_Based_Count" might not be set in "Create_Managed_Key"
   36 |      Managed    : out    Managed_Key;
      |      ^~~~~~~
  reason for check: OUT parameter should be fully initialized on return
  possible fix: initialize "Managed.Policy.Usage_Based_Count" on all paths, make "Managed" an IN OUT parameter or annotate it with aspect Relaxed_Initialization

anubis_key_manager.ads:36:07: low: "Managed.Status" might not be set in "Create_Managed_Key"
   36 |      Managed    : out    Managed_Key;
      |      ^~~~~~~
  reason for check: OUT parameter should be fully initialized on return
  possible fix: initialize "Managed.Status" on all paths, make "Managed" an IN OUT parameter or annotate it with aspect Relaxed_Initialization

anubis_key_manager.ads:36:07: medium: "Managed.Key_Material" might not be initialized in "Create_Managed_Key"
   36 |      Managed    : out    Managed_Key;
      |      ^~~~~~~
  reason for check: OUT parameter should be fully initialized on return
  possible fix: initialize "Managed.Key_Material" on all paths, make "Managed" an IN OUT parameter or annotate it with aspect Relaxed_Initialization

anubis_key_manager.ads:36:07: low: "Managed.Policy.Enabled" might not be set in "Create_Managed_Key"
   36 |      Managed    : out    Managed_Key;
      |      ^~~~~~~
  reason for check: OUT parameter should be fully initialized on return
  possible fix: initialize "Managed.Policy.Enabled" on all paths, make "Managed" an IN OUT parameter or annotate it with aspect Relaxed_Initialization

anubis_key_manager.ads:36:07: low: "Managed.Usage_Count" might not be set in "Create_Managed_Key"
   36 |      Managed    : out    Managed_Key;
      |      ^~~~~~~
  reason for check: OUT parameter should be fully initialized on return
  possible fix: initialize "Managed.Usage_Count" on all paths, make "Managed" an IN OUT parameter or annotate it with aspect Relaxed_Initialization

anubis_key_manager.ads:36:07: low: "Managed.Purpose" might not be set in "Create_Managed_Key"
   36 |      Managed    : out    Managed_Key;
      |      ^~~~~~~
  reason for check: OUT parameter should be fully initialized on return
  possible fix: initialize "Managed.Purpose" on all paths, make "Managed" an IN OUT parameter or annotate it with aspect Relaxed_Initialization

anubis_key_manager.ads:36:07: low: "Managed.Policy.Time_Based_Days" might not be set in "Create_Managed_Key"
   36 |      Managed    : out    Managed_Key;
      |      ^~~~~~~
  reason for check: OUT parameter should be fully initialized on return
  possible fix: initialize "Managed.Policy.Time_Based_Days" on all paths, make "Managed" an IN OUT parameter or annotate it with aspect Relaxed_Initialization

anubis_key_manager.ads:36:07: low: "Managed.Length" might not be set in "Create_Managed_Key"
   36 |      Managed    : out    Managed_Key;
      |      ^~~~~~~
  reason for check: OUT parameter should be fully initialized on return
  possible fix: initialize "Managed.Length" on all paths, make "Managed" an IN OUT parameter or annotate it with aspect Relaxed_Initialization
anubis_key_manager.ads:37:07: info: initialization of "Success" proved
anubis_key_manager.ads:41:13: info: implicit aspect Always_Terminates on "Needs_Rotation" has been proved, subprogram will terminate
anubis_key_manager.ads:42:13: info: implicit aspect Always_Terminates on "Get_Key_Status" has been proved, subprogram will terminate
anubis_key_manager.ads:43:13: info: implicit aspect Always_Terminates on "Get_Usage_Count" has been proved, subprogram will terminate
anubis_key_manager.ads:53:13: info: implicit aspect Always_Terminates on "Key_Material_Zeroed" has been proved, subprogram will terminate
anubis_key_manager.ads:58:15: info: postcondition proved (CVC5: 2 VC in max 0.0 seconds and 1 step)

anubis_key_manager.ads:79:59: high: array index check might fail
   79 |      ((for all I in 1 .. Key.Length => Key.Key_Material (I) = 0) and
      |                                                          ^ here
  reason for check: value must be a valid index into the array
anubis_types-sss.adb:16:13: info: implicit aspect Always_Terminates on "GF_Add" has been proved, subprogram will terminate
anubis_types-sss.adb:21:13: info: implicit aspect Always_Terminates on "GF_Sub" has been proved, subprogram will terminate
anubis_types-sss.adb:26:13: info: implicit aspect Always_Terminates on "GF_Mult" has been proved, subprogram will terminate
anubis_types-sss.adb:32:33: info: loop invariant initialization proved (Trivial: 1 VC in max 0.0 seconds and 2 steps), in call inlined at anubis_types-sss.adb:166
anubis_types-sss.adb:32:33: info: loop invariant preservation proved (Trivial: 1 VC in max 0.0 seconds and 2 steps), in call inlined at anubis_types-sss.adb:166
anubis_types-sss.adb:32:33: info: loop invariant preservation proved (Trivial: 1 VC in max 0.0 seconds and 2 steps), in call inlined at anubis_types-sss.adb:174
anubis_types-sss.adb:32:33: info: loop invariant initialization proved (Trivial: 1 VC in max 0.0 seconds and 2 steps), in call inlined at anubis_types-sss.adb:174
anubis_types-sss.adb:32:33: info: loop invariant initialization proved (Trivial: 1 VC in max 0.0 seconds and 2 steps), in call inlined at anubis_types-sss.adb:95, in call inlined at anubis_types-sss.adb:217
anubis_types-sss.adb:32:33: info: loop invariant preservation proved (Trivial: 1 VC in max 0.0 seconds and 2 steps), in call inlined at anubis_types-sss.adb:95, in call inlined at anubis_types-sss.adb:217
anubis_types-sss.adb:32:33: info: loop invariant initialization proved (Trivial: 1 VC in max 0.0 seconds and 2 steps), in call inlined at anubis_types-sss.adb:98, in call inlined at anubis_types-sss.adb:217
anubis_types-sss.adb:32:33: info: loop invariant preservation proved (Trivial: 1 VC in max 0.0 seconds and 2 steps), in call inlined at anubis_types-sss.adb:98, in call inlined at anubis_types-sss.adb:217
anubis_types-sss.adb:32:33: info: loop invariant initialization proved (Trivial: 1 VC in max 0.0 seconds and 2 steps), in call inlined at anubis_types-sss.adb:304
anubis_types-sss.adb:32:33: info: loop invariant preservation proved (Trivial: 1 VC in max 0.0 seconds and 2 steps), in call inlined at anubis_types-sss.adb:304
anubis_types-sss.adb:32:33: info: loop invariant preservation proved (Trivial: 1 VC in max 0.0 seconds and 2 steps), in call inlined at anubis_types-sss.adb:71
anubis_types-sss.adb:32:33: info: loop invariant initialization proved (Trivial: 1 VC in max 0.0 seconds and 2 steps), in call inlined at anubis_types-sss.adb:71
anubis_types-sss.adb:32:33: info: loop invariant initialization proved (Trivial: 1 VC in max 0.0 seconds and 2 steps), in call inlined at anubis_types-sss.adb:73
anubis_types-sss.adb:32:33: info: loop invariant preservation proved (Trivial: 1 VC in max 0.0 seconds and 2 steps), in call inlined at anubis_types-sss.adb:73
anubis_types-sss.adb:33:31: info: loop variant proved (CVC5: 1 VC in max 0.0 seconds and 1 step), in call inlined at anubis_types-sss.adb:166
anubis_types-sss.adb:33:31: info: loop variant proved (CVC5: 1 VC in max 0.0 seconds and 1 step), in call inlined at anubis_types-sss.adb:174
anubis_types-sss.adb:33:31: info: loop variant proved (CVC5: 1 VC in max 0.0 seconds and 1 step), in call inlined at anubis_types-sss.adb:95, in call inlined at anubis_types-sss.adb:217
anubis_types-sss.adb:33:31: info: loop variant proved (CVC5: 1 VC in max 0.0 seconds and 1 step), in call inlined at anubis_types-sss.adb:98, in call inlined at anubis_types-sss.adb:217
anubis_types-sss.adb:33:31: info: loop variant proved (CVC5: 1 VC in max 0.0 seconds and 1 step), in call inlined at anubis_types-sss.adb:304
anubis_types-sss.adb:33:31: info: loop variant proved (CVC5: 1 VC in max 0.0 seconds and 1 step), in call inlined at anubis_types-sss.adb:71
anubis_types-sss.adb:33:31: info: loop variant proved (CVC5: 1 VC in max 0.0 seconds and 1 step), in call inlined at anubis_types-sss.adb:73
anubis_types-sss.adb:49:19: info: division check proved (CVC5: 1 VC in max 0.0 seconds and 1 step), in call inlined at anubis_types-sss.adb:166
anubis_types-sss.adb:49:19: info: division check proved (CVC5: 1 VC in max 0.0 seconds and 1 step), in call inlined at anubis_types-sss.adb:174
anubis_types-sss.adb:49:19: info: division check proved (CVC5: 1 VC in max 0.0 seconds and 1 step), in call inlined at anubis_types-sss.adb:95, in call inlined at anubis_types-sss.adb:217
anubis_types-sss.adb:49:19: info: division check proved (CVC5: 1 VC in max 0.0 seconds and 1 step), in call inlined at anubis_types-sss.adb:98, in call inlined at anubis_types-sss.adb:217
anubis_types-sss.adb:49:19: info: division check proved (CVC5: 1 VC in max 0.0 seconds and 1 step), in call inlined at anubis_types-sss.adb:304
anubis_types-sss.adb:49:19: info: division check proved (CVC5: 1 VC in max 0.0 seconds and 1 step), in call inlined at anubis_types-sss.adb:71
anubis_types-sss.adb:49:19: info: division check proved (CVC5: 1 VC in max 0.0 seconds and 1 step), in call inlined at anubis_types-sss.adb:73
anubis_types-sss.adb:57:13: info: implicit aspect Always_Terminates on "GF_Div" has been proved, subprogram will terminate
anubis_types-sss.adb:59:07: info: initialization of "Inv" proved
anubis_types-sss.adb:69:36: info: loop invariant initialization proved (Trivial: 1 VC in max 0.0 seconds and 2 steps)
anubis_types-sss.adb:69:36: info: loop invariant preservation proved (Trivial: 1 VC in max 0.0 seconds and 2 steps)
anubis_types-sss.adb:70:34: info: loop variant proved (CVC5: 1 VC in max 0.0 seconds and 1 step)
anubis_types-sss.adb:83:13: info: implicit aspect Always_Terminates on "Eval_Polynomial" has been proved, subprogram will terminate
anubis_types-sss.adb:91:33: info: loop invariant initialization proved (Trivial: 1 VC in max 0.0 seconds and 2 steps), in call inlined at anubis_types-sss.adb:217
anubis_types-sss.adb:91:33: info: loop invariant preservation proved (Trivial: 1 VC in max 0.0 seconds and 2 steps), in call inlined at anubis_types-sss.adb:217
anubis_types-sss.adb:92:31: info: loop variant proved (CVC5: 1 VC in max 0.0 seconds and 1 step), in call inlined at anubis_types-sss.adb:217

anubis_types-sss.adb:95:45: medium: "Coeffs" might not be initialized, in call inlined at anubis_types-sss.adb:217
   95 |         Result := GF_Add (Result, GF_Mult (Coefficients (I), X_Power));
      |                                            ^ here
anubis_types-sss.adb:95:59: info: index check proved (CVC5: 2 VC in max 0.0 seconds and 1 step), in call inlined at anubis_types-sss.adb:217
anubis_types-sss.adb:191:07: info: range check proved (CVC5: 2 VC in max 0.0 seconds and 1 step)
anubis_types-sss.adb:195:33: info: loop invariant preservation proved (Trivial: 1 VC in max 0.0 seconds and 2 steps)
anubis_types-sss.adb:195:33: info: loop invariant initialization proved (Trivial: 1 VC in max 0.0 seconds and 2 steps)
anubis_types-sss.adb:196:31: info: loop variant proved (CVC5: 1 VC in max 0.0 seconds and 1 step)
anubis_types-sss.adb:199:18: info: index check proved (CVC5: 2 VC in max 0.0 seconds and 1 step)

anubis_types-sss.adb:204:36: medium: "Coeffs" might not be initialized
  204 |            pragma Loop_Invariant (Coeffs (0) = Secret (Byte_Idx));
      |                                   ^~~~~~
anubis_types-sss.adb:204:36: info: loop invariant initialization proved (CVC5: 1 VC in max 0.0 seconds and 1 step)
anubis_types-sss.adb:204:36: info: loop invariant preservation proved (CVC5: 1 VC in max 0.0 seconds and 1 step)
anubis_types-sss.adb:204:44: info: index check proved (CVC5: 4 VC in max 0.0 seconds and 1 step)
anubis_types-sss.adb:204:57: info: index check proved (CVC5: 4 VC in max 0.0 seconds and 1 step)
anubis_types-sss.adb:205:34: info: loop variant proved (CVC5: 1 VC in max 0.0 seconds and 1 step)

anubis_types-sss.adb:207:43: medium: overflow check might fail, cannot prove upper bound for (Byte_Idx + I)
  207 |            Coeffs (I) := Byte ((Byte_Idx + I) mod 256);
      |                                ~~~~~~~~~~^~~~
  e.g. when Byte_Idx = Integer'Last
        and Coeffs = (0 => Byte'Last, 1 => Byte'Last)
        and Coeffs'First = 0
        and Coeffs'Last = 1
        and I = 1
  reason for check: result of addition must fit in a 32-bits machine integer
anubis_types-sss.adb:207:48: info: division check proved (CVC5: 1 VC in max 0.0 seconds and 1 step)
anubis_types-sss.adb:207:48: info: range check proved (CVC5: 1 VC in max 0.0 seconds and 1 step)

anubis_types-sss.adb:212:36: medium: "Coeffs" might not be initialized
  212 |            pragma Loop_Invariant (Coeffs (0) = Secret (Byte_Idx));
      |                                   ^~~~~~
anubis_types-sss.adb:212:36: info: loop invariant initialization proved (CVC5: 1 VC in max 0.0 seconds and 1 step)
anubis_types-sss.adb:212:36: info: loop invariant preservation proved (CVC5: 1 VC in max 0.0 seconds and 1 step)
anubis_types-sss.adb:212:44: info: index check proved (CVC5: 4 VC in max 0.0 seconds and 1 step)
anubis_types-sss.adb:212:57: info: index check proved (CVC5: 4 VC in max 0.0 seconds and 1 step)
anubis_types-sss.adb:213:34: info: loop variant proved (CVC5: 1 VC in max 0.0 seconds and 1 step)
anubis_types-sss.adb:216:47: info: range check proved (CVC5: 1 VC in max 0.0 seconds and 1 step)

anubis_types-sss.adb:217:41: medium: "Coeffs" might not be initialized
  217 |               Y_Val : constant Byte := Eval_Polynomial (Coeffs, X_Val);
      |                                        ^~~~~~~~~~~~~~~
anubis_types-sss.adb:219:40: info: range check proved (CVC5: 2 VC in max 0.0 seconds and 12 steps)
anubis_types-sss.adb:220:47: info: overflow check proved (CVC5: 2 VC in max 0.0 seconds and 28 steps)
anubis_types-sss.adb:220:62: info: overflow check proved (CVC5: 2 VC in max 0.0 seconds and 38 steps)
anubis_types-sss.adb:220:62: info: index check proved (CVC5: 2 VC in max 0.0 seconds and 49 steps)
anubis_types-sss.adb:221:51: info: range check proved (CVC5: 2 VC in max 0.0 seconds and 53 steps)
anubis_types-sss.adb:229:33: info: loop invariant preservation proved (Trivial: 1 VC in max 0.0 seconds and 2 steps)
anubis_types-sss.adb:229:33: info: loop invariant initialization proved (Trivial: 1 VC in max 0.0 seconds and 2 steps)
anubis_types-sss.adb:230:31: info: loop variant proved (CVC5: 1 VC in max 0.0 seconds and 40 steps)
anubis_types-sss.adb:231:18: info: index check proved (CVC5: 2 VC in max 0.0 seconds and 176 steps)

anubis_types-sss.adb:231:21: warning: unused assignment
  231 |         Coeffs (I) := 0;
      |         ~~~~~~~~~~~^~~~
anubis_types-sss.adb:247:07: info: initialization of "Temp" proved
anubis_types-sss.adb:251:33: info: loop invariant initialization proved (Trivial: 1 VC in max 0.0 seconds and 2 steps)
anubis_types-sss.adb:251:33: info: loop invariant preservation proved (Trivial: 1 VC in max 0.0 seconds and 2 steps)
anubis_types-sss.adb:252:31: info: loop variant proved (CVC5: 1 VC in max 0.0 seconds and 1 step)
anubis_types-sss.adb:257:16: info: range check proved (CVC5: 2 VC in max 0.0 seconds and 1 step)
anubis_types-sss.adb:264:33: info: loop invariant initialization proved (Trivial: 1 VC in max 0.0 seconds and 2 steps)
anubis_types-sss.adb:264:33: info: loop invariant preservation proved (Trivial: 1 VC in max 0.0 seconds and 2 steps)
anubis_types-sss.adb:265:31: info: loop variant proved (CVC5: 1 VC in max 0.0 seconds and 1 step)
anubis_types-sss.adb:272:44: info: range check proved (CVC5: 2 VC in max 0.0 seconds and 1 step)
anubis_types-sss.adb:272:52: info: overflow check proved (CVC5: 2 VC in max 0.0 seconds and 1 step)
anubis_types-sss.adb:272:64: info: range check proved (CVC5: 2 VC in max 0.0 seconds and 1 step)
anubis_types-sss.adb:275:39: info: loop invariant initialization proved (Trivial: 1 VC in max 0.0 seconds and 2 steps)
anubis_types-sss.adb:275:39: info: loop invariant preservation proved (Trivial: 1 VC in max 0.0 seconds and 2 steps)
anubis_types-sss.adb:276:37: info: loop variant proved (CVC5: 1 VC in max 0.0 seconds and 1 step)
anubis_types-sss.adb:278:31: info: index check proved (CVC5: 2 VC in max 0.0 seconds and 1 step)
anubis_types-sss.adb:284:55: info: index check proved (CVC5: 2 VC in max 0.0 seconds and 1 step)
anubis_types-sss.adb:285:49: info: index check proved (CVC5: 2 VC in max 0.0 seconds and 1 step)
anubis_types-sss.adb:285:64: info: overflow check proved (CVC5: 2 VC in max 0.0 seconds and 1 step)
anubis_types-sss.adb:285:86: info: overflow check proved (CVC5: 2 VC in max 0.0 seconds and 1 step)
anubis_types-sss.adb:285:86: info: index check proved (CVC5: 2 VC in max 0.0 seconds and 1 step)
anubis_types-sss.adb:290:42: info: loop invariant initialization proved (Trivial: 1 VC in max 0.0 seconds and 2 steps)
anubis_types-sss.adb:290:42: info: loop invariant preservation proved (Trivial: 1 VC in max 0.0 seconds and 2 steps)
anubis_types-sss.adb:291:40: info: loop variant proved (CVC5: 1 VC in max 0.0 seconds and 1 step)
anubis_types-sss.adb:295:61: info: index check proved (CVC5: 2 VC in max 0.0 seconds and 1 step)
anubis_types-sss.adb:335:27: info: range check proved (CVC5: 2 VC in max 0.0 seconds and 1 step)
anubis_types-sss.adb:337:33: info: loop invariant initialization proved (CVC5: 2 VC in max 0.0 seconds and 1 step)
anubis_types-sss.adb:337:33: info: loop invariant preservation proved (CVC5: 2 VC in max 0.0 seconds and 1 step)
anubis_types-sss.adb:337:72: info: range check proved (CVC5: 4 VC in max 0.0 seconds and 1 step)
anubis_types-sss.adb:338:31: info: loop variant proved (CVC5: 1 VC in max 0.0 seconds and 1 step)
anubis_types-sss.adb:339:21: info: overflow check proved (CVC5: 2 VC in max 0.0 seconds and 1 step)
anubis_types-sss.adb:339:34: info: overflow check proved (CVC5: 2 VC in max 0.0 seconds and 1 step)
anubis_types-sss.adb:339:34: info: index check proved (CVC5: 2 VC in max 0.0 seconds and 1 step)

anubis_types-sss.adb:342:14: medium: "Share.Y" might not be initialized
  342 |      return Share;
      |             ^~~~~
anubis_types-sss.adb:351:33: info: loop invariant initialization proved (CVC5: 1 VC in max 0.0 seconds and 1 step)
anubis_types-sss.adb:351:33: info: loop invariant preservation proved (CVC5: 1 VC in max 0.0 seconds and 1 step)
anubis_types-sss.adb:351:81: info: index check proved (CVC5: 4 VC in max 0.0 seconds and 1 step)
anubis_types-sss.adb:352:31: info: loop variant proved (CVC5: 1 VC in max 0.0 seconds and 1 step)
anubis_types-sss.ads:49:13: info: implicit aspect Always_Terminates on "Shares_Have_Unique_Indices" has been proved, subprogram will terminate
anubis_types-sss.ads:53:13: info: implicit aspect Always_Terminates on "Is_Valid_Threshold" has been proved, subprogram will terminate
anubis_types-sss.ads:58:13: info: implicit aspect Always_Terminates on "All_Shares_Valid" has been proved, subprogram will terminate
anubis_types-sss.ads:62:13: info: implicit aspect Always_Terminates on "Shares_Same_Length" has been proved, subprogram will terminate
anubis_types-sss.ads:68:13: info: implicit aspect Always_Terminates on "GF_Add_Commutative" has been proved, subprogram will terminate
anubis_types-sss.ads:70:15: info: postcondition proved (CVC5: 1 VC in max 0.0 seconds and 1 step; Trivial: 1 VC in max 0.0 seconds and 2 steps)
anubis_types-sss.ads:73:13: info: implicit aspect Always_Terminates on "GF_Add_Associative" has been proved, subprogram will terminate
anubis_types-sss.ads:75:15: info: postcondition proved (CVC5: 1 VC in max 0.0 seconds and 1 step; Trivial: 1 VC in max 0.0 seconds and 2 steps)
anubis_types-sss.ads:78:13: info: implicit aspect Always_Terminates on "GF_Mult_Commutative" has been proved, subprogram will terminate

anubis_types-sss.ads:80:15: medium: postcondition might fail
   80 |      Post => GF_Mult_Commutative'Result = True;
      |              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  e.g. when GF_Mult_Commutative'Result = False
anubis_types-sss.ads:83:13: info: implicit aspect Always_Terminates on "GF_Mult_Distributive" has been proved, subprogram will terminate

anubis_types-sss.ads:85:15: medium: postcondition might fail
   85 |      Post => GF_Mult_Distributive'Result = True;
      |              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  e.g. when GF_Mult_Distributive'Result = False

anubis_types-sss.ads:97:07: medium: "Shares" might not be initialized in "Split_Secret"
   97 |      Shares    : out    Share_Array;
      |      ^~~~~~
  reason for check: OUT parameter should be fully initialized on return
  possible fix: initialize "Shares" on all paths, make "Shares" an IN OUT parameter or annotate it with aspect Relaxed_Initialization
anubis_types-sss.ads:98:07: info: initialization of "Success" proved
anubis_types-sss.ads:105:21: info: range check proved (CVC5: 2 VC in max 0.0 seconds and 1 step)

anubis_types-sss.ads:109:19: medium: "Shares" might not be initialized
  109 |                  Shares'Length = Num_Shares and
      |                  ^~~~~~
anubis_types-sss.ads:109:25: info: range check proved (CVC5: 2 VC in max 0.0 seconds and 163 steps)

anubis_types-sss.ads:110:19: medium: postcondition might fail, cannot prove Shares_Have_Unique_Indices (Shares)
  110 |                  Shares_Have_Unique_Indices (Shares) and
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  possible fix: loop invariant at anubis_types-sss.adb:195 should mention Shares
  195 |         pragma Loop_Invariant (True);
      |         ^ here
anubis_types-sss.ads:112:53: info: range check proved (CVC5: 2 VC in max 0.0 seconds and 147 steps)
anubis_types-sss.ads:123:07: info: initialization of "Reconstructed" proved
anubis_types-sss.ads:124:07: info: initialization of "Success" proved

anubis_types-sss.ads:132:19: medium: postcondition might fail, cannot prove Data (I) = 0
  132 |                  Is_All_Zero (Reconstructed));  -- Zero on failure
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~
  possible fix: loop invariant at anubis_types-sss.adb:264 should mention Reconstructed
  264 |         pragma Loop_Invariant (True);
      |         ^ here
  in inlined expression function body at anubis_types.ads:83
anubis_types-sss.ads:139:13: info: implicit aspect Always_Terminates on "Get_Share_Index" has been proved, subprogram will terminate
anubis_types-sss.ads:142:13: info: implicit aspect Always_Terminates on "Make_Share" has been proved, subprogram will terminate
anubis_types-sss.ads:149:13: info: implicit aspect Always_Terminates on "Get_Share_Length" has been proved, subprogram will terminate
Summary logged in /Users/sicarii/Desktop/anubis-spark/obj/gnatprove/gnatprove.out
