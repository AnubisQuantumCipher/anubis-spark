name: Release Builds

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  LIBOQS_VERSION: '0.14.0'
  LIBSODIUM_VERSION: '1.0.20'

jobs:
  build-linux-x86_64:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Build in AMD64 container
        run: |
          docker run --rm --platform linux/amd64 \
            -v $PWD:/workspace \
            -w /workspace \
            ubuntu:22.04 \
            bash -c "
              apt-get update && \
              apt-get install -y build-essential cmake ninja-build wget libssl-dev unzip git curl && \
              wget https://github.com/open-quantum-safe/liboqs/archive/refs/tags/${LIBOQS_VERSION}.tar.gz && \
              tar xzf ${LIBOQS_VERSION}.tar.gz && \
              cd liboqs-${LIBOQS_VERSION} && \
              mkdir build && cd build && \
              cmake -GNinja -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DCMAKE_INSTALL_PREFIX=/opt/deps -DOQS_USE_OPENSSL=ON .. && \
              ninja && ninja install && \
              cd /workspace && \
              wget https://download.libsodium.org/libsodium/releases/libsodium-${LIBSODIUM_VERSION}.tar.gz && \
              tar xzf libsodium-${LIBSODIUM_VERSION}.tar.gz && \
              cd libsodium-${LIBSODIUM_VERSION} && \
              ./configure --prefix=/opt/deps --enable-static --disable-shared && \
              make -j\$(nproc) && make install && \
              cd /workspace && \
              wget https://github.com/alire-project/alire/releases/download/v2.0.1/alr-2.0.1-bin-x86_64-linux.zip && \
              unzip alr-2.0.1-bin-x86_64-linux.zip && \
              chmod +x bin/alr && \
              ./bin/alr --non-interactive toolchain --select && \
              ./bin/alr update && \
              eval \"\$(./bin/alr printenv)\" && \
              export PKG_CONFIG_PATH=/opt/deps/lib/pkgconfig && \
              export ANUBIS_LIB_DIR=/opt/deps/lib && \
              export STATIC_LINK=true && \
              ./bin/alr build --release && \
              strip bin/anubis_main
            "

      - name: Create release archive
        run: |
          mkdir -p release/anubis-spark-linux-x86_64
          cp bin/anubis_main release/anubis-spark-linux-x86_64/
          cp README.md release/anubis-spark-linux-x86_64/
          cp LICENSE-MIT release/anubis-spark-linux-x86_64/
          cp LICENSE-APACHE release/anubis-spark-linux-x86_64/
          cd release
          tar czf anubis-spark-linux-x86_64.tar.gz anubis-spark-linux-x86_64
          sha256sum anubis-spark-linux-x86_64.tar.gz > anubis-spark-linux-x86_64.tar.gz.sha256

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: anubis-spark-linux-x86_64
          path: release/anubis-spark-linux-x86_64.tar.gz*

  build-macos-universal:
    runs-on: macos-13  # Intel runner - GNAT toolchain is x86_64 only
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies via Homebrew
        run: |
          brew install liboqs libsodium openssl@3

      - name: Install Alire
        uses: alire-project/setup-alire@v3
        with:
          version: '2.0.1'

      - name: Build ANUBIS-SPARK
        run: |
          alr build --release
          strip bin/anubis_main

      - name: Verify binary architecture
        run: |
          echo "Binary architecture:"
          file bin/anubis_main
          if file bin/anubis_main | grep -q "x86_64"; then
            echo "✅ Correct x86_64 binary"
          else
            echo "❌ ERROR: Not an x86_64 binary!"
            exit 1
          fi

      - name: Make binary portable (works on both Intel and Apple Silicon)
        run: |
          chmod +x scripts/make-portable-macos.sh
          ./scripts/make-portable-macos.sh bin/anubis_main

      - name: Fix RPATH duplicates
        run: |
          ./scripts/fix-rpath.sh bin/anubis_main

      - name: Create release archive
        run: |
          mkdir -p release/anubis-spark-macos-universal
          cp bin/anubis_main release/anubis-spark-macos-universal/
          cp README.md release/anubis-spark-macos-universal/
          cp LICENSE-MIT release/anubis-spark-macos-universal/
          cp LICENSE-APACHE release/anubis-spark-macos-universal/
          cd release
          tar czf anubis-spark-macos-universal.tar.gz anubis-spark-macos-universal
          shasum -a 256 anubis-spark-macos-universal.tar.gz > anubis-spark-macos-universal.tar.gz.sha256

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: anubis-spark-macos-universal
          path: release/anubis-spark-macos-universal.tar.gz*

  create-release:
    needs: [build-linux-x86_64, build-macos-universal]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            anubis-spark-linux-x86_64/anubis-spark-linux-x86_64.tar.gz
            anubis-spark-linux-x86_64/anubis-spark-linux-x86_64.tar.gz.sha256
            anubis-spark-macos-universal/anubis-spark-macos-universal.tar.gz
            anubis-spark-macos-universal/anubis-spark-macos-universal.tar.gz.sha256
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-docker:
    needs: [build-linux-x86_64]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
